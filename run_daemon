#!/usr/bin/Rscript

library('RJSONIO', warn.conflicts = F)

# Add an environment variable 'scholaRdaemon' to .bashrc
# else search for it in user home directory

args <- commandArgs(TRUE)

# if ("--debug" %in% args) debug.mode <- T
# if ("-h" %in% args || "--help" %in% args) 

# Better to do the above systematically with some sort of [potentially degenerate] list data structure holding outcomes of flags


#     W h e r e      i s       t h e       d a e m o n     ?


GoToSDdir <- function(bypass.sys.check = F) {
  RDirCheck <- function() {
    posswds <- list.files(Sys.getenv("HOME"), pattern = '.*scholaRdaemon$', include.dirs = T, recursive = T)
    if (length(posswds) > 0) {
      for (posswd in posswds) {
          posswd.files <- list.files(path = path.expand(paste0("~/",posswd,"/R")))
          if ('scholaRdaemon.R' %in% posswd.files) {
          setwd(posswd)
            return(file.path('R/scholaRdaemon.R'))
          }
        }
        if (!grepl("/scholaRdaemon$", getwd())) return(NA) else return(file.path('R/scholaRdaemon.R'))
      }
      return(NA)
  }
  
  if (!grepl("/scholaRdaemon$",getwd()) && !bypass.sys.check) {
    if (Sys.getenv('scholaRdaemon') != '') {
      setwd(Sys.getenv('scholaRdaemon'))
      return(file.path('R/scholaRdaemon.R'))
    } else {
      return(RDirCheck())
    }
  } else if (bypass.sys.check) {RDirCheck()} else {
    return(file.path('R/scholaRdaemon.R'))
  }
  # should pretty definitely know where the daemon is now and be in its directory
}

if (!file.exists('R/scholaRdaemon.R')) {
  found.daemon <- GoToSDdir()
  if (is.na(found.daemon)) {
    stop("Unable to find daemon. Please put it in the R sub-directory below the main scholaRdaemon directory, as in the GitHub repo at https://github.com/lmmx/scholaRdaemon")
  }
} else found.daemon <- file.path('R/scholaRdaemon.R')

# note to self: use Konrad Rudolph 'modules' package
full.daemon.path <- normalizePath(found.daemon)
daemon.dir <- gsub('scholaRdaemon.R$','',full.daemon.path) # The 'R/' directory
top.dir <- gsub('/R/','/',daemon.dir)
top.config.dir <- paste0(top.dir,'config/')


#    W h a t        a r e       t h e       b o t s       c a l l e d       ?

# Not hard-coded, read bots' names from top-level JSON (hence needed to locate directory first)

bot.registry <- file.path(paste0(top.config.dir,'bot_registry.json'))
if (file.exists(bot.registry)) {
  bot.codes <- fromJSON(bot.registry)$bots
} else {
  stop('Missing file "bot_registry.json". Please create it in the config sub-directory below the main scholaRdaemon directory, as in the GitHub repo at https://github.com/lmmx/scholaRdaemon\n\nJSON should look like\n\n{"bots":{"flag":"Twitter_handle"}}\n\nwhere "flag"" is the optional flag to be passed to run_daemon and "Twitter_handle" is the account to be tweet papers from (must be the same as the Twitter handle). Multiple comma-separated entries can be specified, e.g.\n\n{"bots":{"flag1":"Bot_1", "flag2":"Bot_2"}}')
}

bot.flags <- names(bot.codes)

if (length(args) > 0) {
  flag.details <- list("debug" = list(def = "Print message IDs rather than sending them through the tweet making process", flag = "--debug", output = "debug.mode <- T"),
                            "help" = list(def = "Display flag definitions", flag = c("-h","--help"), output = "cat(help.prompt); quit();")
                             )
  
  flag.conditions <- lapply(flag.details, function(x) {paste0(paste0('"',x$flag,'"'), sep = " %in% args", collapse = " || ")})
  flag.truth.table <- unlist(lapply(flag.conditions, function(x) {
    if (eval(parse(text = x))) {
      return(T)
    } else return(F)
  }))
  
  flag.prompts <- lapply(names(flag.truth.table), function(x){ # joins 2-space-separatated flags with a tab-space to the flag description
                                                    paste0(c(paste0(flag.details[x][[1]][['flag']], collapse="  "),
                                                                    flag.details[x][[1]][['def']]), collapse="\t")  } )
  bot.prompts <- lapply(bot.flags, function(x){ # joins 2-space-separatated flags with a tab-space to the flag description
    paste0(c(x, paste0('@',bot.codes[[x]])), collapse="\t")  } )
  help.prompt <- paste(c('Flags\n-----', 
                         unlist(flag.prompts),
                         'Available bots [codes can be given as arguments rather than checking all accounts]\n-----------------------------------------------------------------------------',
                         unlist(bot.prompts),''),collapse="\n\n")
  
  # The following lines handle the flags, running the corresponding 'output' entry in flag.details for any supplied
  flag.output <- unlist(lapply(names(flag.truth.table), function(x){if (flag.truth.table[x]) return(flag.details[x][[1]][['output']])}))
  if (!is.null(flag.output)) eval(parse(text = flag.output))

  all.flags <- c(as.vector(unlist(lapply(flag.details, function(x) x[['flag']]))),
                 as.vector(names(bot.codes)))
  bad.args <- args[!args %in% all.flags]
  if (length(bad.args) == 1) {
    warning(paste0("No known argument '",bad.args,"'"))
  } else if (length(bad.args > 1)) {
    bad.arg.list <- paste(shQuote(bad.args[seq(1, length(bad.args) - 1)], type="csh"), collapse=", ")
    warning(paste0("No known arguments ",bad.arg.list,", or '",bad.args[length(bad.args)],"'"))
  }

  if (!all(!names(bot.codes) %in% args)) { # If no bot flag is specified in the arguments passed to run_daemon, use all bots
    bots <- bot.codes[[bot.flags[bot.flags %in% args]]]
  } else if (length(args) == length(bad.args)) { # if bots may have been mistyped, don't run all bots!
    stop("No proper arguments used, so no bots were run as a precaution.")
  } else {
    bots <- as.vector(bot.codes)
  }
  # if all bots' flags are not missing (i.e. if at least 1 bot was specified) then declare bots, else assume use all bots
} else bots <- as.vector(bot.codes) # use all bots if none are specified, storing Twitter handles as character vector


#     R u n       t h e      b o t s


no.confirm <- T

for (bot in bots) {
  bot.config.dir <- file.path(paste0(top.config.dir,bot))
  if (file.exists(bot.config.dir)) {
    setwd(bot.config.dir)
    # move into a config sub-directory to get authentication info specific to one bot
    cat('\n@',bot,':\n',sep='')
    source(full.daemon.path)
    setwd(top.dir) # not strictly necessary, and full paths are being used, but may avoid awkward complications if errors occur
  } else {
    warning(paste0("Skipping bot '",bot,"': config files not found. Please put them in a config/",bot," below the main scholaRdaemon directory, as in the GitHub repo at https://github.com/lmmx/scholaRdaemon"))
  }
}

remove('no.confirm')